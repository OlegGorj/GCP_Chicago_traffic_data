package main

import (
	"fmt"
	"log"
	"net/http"
  "io"
  "io/ioutil"
  "encoding/json"
  _ "strconv"
  _ "html"
  _ "html/template"
  "os"
  "sync"
  b64 "encoding/base64"
	"bytes"

  "cloud.google.com/go/pubsub"
	"google.golang.org/appengine"
  _ "golang.org/x/net/context"
)

var (
	messagesMu sync.Mutex
  countMu sync.Mutex
	count   int
  subscription *pubsub.Subscription
	datastoreServiceUri string
)

func main() {
	datastoreServiceUri = getENV("DATASTORE_SERVICE")

	http.HandleFunc("/_ah/health", healthCheckHandler)
  http.HandleFunc("/push", pushHandler)
	http.HandleFunc("/datastore", datastoreHandler)
  http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprint(w, "This is main entry for endpoints..")
	})

	log.Print("Starting service.....")
	//log.Print("Listening on port 8080")
	//log.Fatal(http.ListenAndServe(":8080", nil))
	appengine.Main()
}

func healthCheckHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprint(w, "ok")
}

type pushRequest struct {
    Message struct {
        Attributes map[string]string
        Data       string `json:"data"`
        message_id     string `json:"message_id"`
        messageId      string `json:"messageId"`
        publish_time   string `json:"publish_time"`
        publishTime    string `json:"publishTime"`
    }
    Subscription string
}

type Entry struct {
	_direction		string	`datastore:"_direction"`
	_fromst				string	`datastore:"_fromst"`
	_last_updt		string	`datastore:"_last_updt"`
	_length				string	`datastore:"_length"`
	_lif_lat			string	`datastore:"_lif_lat"`
	_lit_lat			string	`datastore:"_lit_lat"`
	_lit_lon			string	`datastore:"_lit_lon"`
	_strheading		string	`datastore:"_strheading"`
	_tost					string	`datastore:"_tost"`
	_traffic			string	`datastore:"_traffic"`
	segmentid			string	`datastore:"segmentid"`
	start_lon			string	`datastore:"start_lon"`
	street				string	`datastore:"street"`
}

func pushHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

  if r.Body == nil {
      log.Print("ERROR: Please send a request body")
      return
  }
  body, err := ioutil.ReadAll(r.Body)
  defer r.Body.Close()
  if err != nil {
    log.Printf("INFO:  Can't read http body ioutil.ReadAll... ")
		return
	}
  var msg pushRequest
  if err := json.Unmarshal([]byte(body), &msg); err != nil {
    log.Printf("ERROR: Could not decode body with Unmarshal: %s \n", string(body))
  }
  //log.Printf("DEBUG:  >>>>>  body: %s \n", string(body))
  //log.Printf("DEBUG:  >>>>>  messageId: "    + msg.Message.messageId + "\n")
  sDec, _  := b64.StdEncoding.DecodeString( msg.Message.Data )
  log.Printf("DEBUG:  >>>>> Message.Data:" + string(sDec) + "\n")
  var data Entry
  if err := json.Unmarshal(sDec, &data); err != nil {
    log.Printf("ERROR: Could not decode Message.Data into Entry type with Unmarshal: %s \n", string(sDec))
  }
	//log.Printf("DEBUG:  >>>>> Entry:" + string(sDec) + "\n")

	// calling datastore service
	log.Print("DEBUG: Calling Datastore service at  " + datastoreServiceUri + "with the payload: \n" + string(sDec) + "\n")
	rsp, err := http.Post(datastoreServiceUri, "application/json", bytes.NewBuffer(sDec))
	defer rsp.Body.Close()
	body_byte, err := ioutil.ReadAll(rsp.Body)
	if err != nil { panic(err) }
	log.Print("INFO: Response from Datastore service: " + string(body_byte) + "\n\n")


	w.WriteHeader(http.StatusOK)
	io.WriteString(w, "{\"status\":\"0\", \"message\":\"ok\"}")

}

// example of use
// c := [100]byte{'a', 'b', 'c'}
// fmt.Println("C: ", len(c), c[:4])
// g := CToGoString(c[:])
// fmt.Println("Go:", len(g), g)
func CToGoString(c []byte) string {
    n := -1
    for i, b := range c {
        if b == 0 {
            break
        }
        n = i
    }
    return string(c[:n+1])
}

func getENV(k string) string {
	v := os.Getenv(k)
	if v == "" {
		log.Fatalf("%s environment variable not set.", k)
	}
	return v
}


// eof
